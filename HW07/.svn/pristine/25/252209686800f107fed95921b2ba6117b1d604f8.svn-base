package model;

import java.net.SocketException;
import java.net.UnknownHostException;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.function.Consumer;

import provided.client.model.IClientModel;
import provided.client.model.taskUtils.ITaskFactory;
import provided.client.model.taskUtils.ITaskFactoryLoader;
import provided.client.model.taskUtils.SingletonTaskFactoryLoader;
import provided.compute.ICompute;
import provided.compute.IRemoteTaskViewAdapter;
import provided.compute.ITask;
import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;
import util.MultiTask;

public class ClientModel implements IClientModel {
	
	/**
	 * Model to View adapter of Client
	 */
	IClientViewAdapter adapter;
	
	/**
	 * ClienModel construction
	 * @param adapter the adapter used to communicate with view
	 */
	public ClientModel(IClientViewAdapter adapter) {
		this.adapter = adapter;
	}
	
	/**
	 * The singleton loader of tasks
	 */
	ITaskFactoryLoader loader = SingletonTaskFactoryLoader.SINGLETON;
	
	/**
	 * The command used to output the status to the text area of the client view
	 */
	private Consumer<String> outputCmd = (x) -> adapter.outputToTextArea(x + "\n");
	
	/**
	 * Initialize RMI with the pre-defined command
	 */
	private IRMIUtils rmi= new RMIUtils(outputCmd);

	/**
	 * A remote view adapter that enables a task or any other part of a system to display
	 * a text message on the user interface of a remote system.
	 * 
	 * This one is used for client to output message on server's view
	 */
	private IRemoteTaskViewAdapter engineAdapter;
	
	/**
	 * Stub of cientAdapter
	 */
	private IRemoteTaskViewAdapter clientAdapterStub = null;
	
	/**
	 * A remote view adapter that enables a task or any other part of a system to display
	 * a text message on the user interface of a remote system.
	 * 
	 * This one is used for server to output message on client's view 
	 */
	private IRemoteTaskViewAdapter clientAdapter = new IRemoteTaskViewAdapter() {

		@Override
		public void append(String s) throws RemoteException {
			// TODO Auto-generated method stub
			adapter.outputToTextArea("[Engine Server] " + s + "\n");
		}
		
	};
	
	
	/**
	 * Stub of the remote ICompute object
	 */
	private ICompute stub;
	

	/**
	 * Starts the client model by initializing the RMI system and creating a remote view adapter stub 
	 * for use by an engine server.  Procedure:<br/>
	 * 1. (DO THIS FIRST!) Use the IRMIUtils to start the RMI system, using 
	 * port = IRMI_Defs.CLASS_SERVER_PORT_CLIENT.  
	 * This will also automatically start the the security manager and the class file server for remote dynamic
	 * class loading.<br/>
	 * 2. Export a STUB from the client's IRemoteTaskViewAdapter RMI server object.  
	 * Save this stub for use when connecting to an engine server. <br/>
	 * 
	 */
	@Override
	public void start() {
		// TODO Auto-generated method stub
		rmi.startRMI(IRMI_Defs.CLASS_SERVER_PORT_CLIENT);
		
		try {
			adapter.setRemoteAdress(rmi.getLocalAddress());
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// Exports the remote object to make it available to receive incoming
	    // calls, using the particular supplied port.
		if (clientAdapterStub == null) {
			try {
				clientAdapterStub = (IRemoteTaskViewAdapter) UnicastRemoteObject.exportObject(clientAdapter, 
						IRemoteTaskViewAdapter.BOUND_PORT_CLIENT);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
			
	}

	/**
	 * Stops the client model by using the IRMIUtils to stop the RMI system.
	 * This automatically stops class file server.   
	 * This MUST be called before exiting the system! 
	 */
	@Override
	public void stop() {
		// TODO Auto-generated method stub
		adapter.outputToTextArea("[Client]: Attempting to quit...\n");
		try {
			rmi.stopRMI();
		} catch (Exception e) {
			adapter.outputToTextArea("[Client Error]: Can not stop RMI!\n");
		}
		System.exit(0);
	}

	/**
	 * Connects to the given remote host's Registry and retrieves the stub to the ICompute object bound 
	 * to the ICompute.BOUND_NAME name in the remote Registry on port 
	 * IRMI_Defs.REGISTRY_PORT.  Procedure:<br/> 
	 * 1. Use the IRMIUtils to retrieve the remote Registry at the given IP address. <br/>
	 * 2. Use the remote Registry to retrieve an ICompute STUB bound to the name defined by IComputer.BOUND_NAME
	 * Save the reference to the IComputer stub somewhere.<br/>
	 * 3. Use the ICompute stub to give the client's IRemoteTaskViewAdapter STUB to the remote engine server and
	 *   retrieve the compute engine's IRemoteTaskViewAdapter stub.  Save the retrieved stub for later use.  
	 *   Use the retrieved stub to send a connection status message to the remote compute engine's user interface.<br/> 
	 * 4. Return a string indicating the success or failure of the connection attempt.
	 * 
	 * @param remoteHost The IP address or host name of the remote server.
	 * @return  A status string on the connection.
	 */
	@Override
	public String connectTo(String remoteHost) {
		// TODO Auto-generated method stub
		adapter.outputToTextArea("[ClientModel.connect()]: Locating registry at " + remoteHost + "...\n");
		
		Registry registry = rmi.getRemoteRegistry(remoteHost);
		
		try {
			stub = (ICompute) registry.lookup(ICompute.BOUND_NAME);
	
			engineAdapter = stub.setTextAdapter(clientAdapterStub);
			adapter.outputToTextArea("[ClientModel.connect()] Got text adapater: " + engineAdapter + "\n");
			engineAdapter.append("Hello from the client! \n");
		} catch (AccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NotBoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "[Connection status] Connection to " + remoteHost + " established!\n";
	}

	/**
	 * Sends a string message to the connected compute engine using the IRemoteTaskViewAdapter STUB
	 * received from the engine server.   This message should also be echoed to the local user interface.
	 * @param text The message to be sent
	 */
	@Override
	public void sendMsgToComputeEngine(String text) {
		// TODO Auto-generated method stub
		try {
			engineAdapter.append(text);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		adapter.outputToTextArea("[ClientModel.sendMsgToComputeEngine] Sending msg to connected remote host = " +
				"\"" + text + "\"\n");
	}

	/**
	 * Runs the given ITask on the remote engine server, returning the String formatted
	 * result, which is produced using the given ITask's ITaskResultFormatter object. 
	 * @param task The task to run on the remote engine server.
	 * @param <T> The return type of the give ITask
	 * @return A string representation of the task results, using the task's formatter object.
	 */
	@Override
	public <T> String runTask(ITask<T> task) {
		// TODO Auto-generated method stub

		try {
			return task.getFormatter().format(stub.executeTask(task));
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "[Error] Task Failed!";
	}
	
	/**
	 * Add Task and return the combined task factory
	 * @param task
	 * @return
	 */
	public ITaskFactory<?> addTask(String task) {
		return loader.load(task);
	}
	
	/**
	 * Combine two tasks and return the MultiTask
	 * @param task1 component 1
	 * @param task2 component 2
	 * @param param parameter to make tasks
	 * @return
	 */
	public ITaskFactory<?> combineTask(ITaskFactory<?> task1, ITaskFactory<?> task2, String param) {
		if (task1 == null || task2 == null)
			return null;
		return new ITaskFactory<ArrayList<Object>>() {

			@Override
			public ITask<ArrayList<Object>> make(String param) {
				// TODO Auto-generated method stub
				return new MultiTask(task1.make(param), task2.make(param));
			}
			
			@Override
			public String toString() {
				return task1.toString() + "-" + task2.toString();
			}
		};
	}
}
