package model.strategy;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.awt.image.ImageObserver;
import java.awt.Graphics2D;
import ball.Ball;

public class ImagePaintStrategy extends APaintStrategy{

	ImageObserver imageObs;
	Image image;
	double scaleFactor = 1.0;
	double fillFactor = 1.0;
	
	protected AffineTransform localAT = new AffineTransform();

	ImagePaintStrategy(String filename, double fillFactor) {
		this(new AffineTransform(), filename, fillFactor);
	}
	
	ImagePaintStrategy(AffineTransform at, String filename, double fillFactor) {
		super(at);
		// TODO Auto-generated constructor stub
		this.fillFactor = fillFactor;
		this.scaleFactor = 2.0/(fillFactor*(image.getWidth(imageObs)+image.getHeight(imageObs))/2.0);
		try {
			image = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(filename));
			this.image = image;
		}
		catch (Exception e){
			System.err.println("ImagePaintStrategy: Error reading file: "+filename +"\n"+e);
		}
	}
	
	
	public void paintXfrm(Graphics g, Ball host, AffineTransform at){
		localAT.setToScale(scaleFactor, scaleFactor);
		localAT.translate(-image.getWidth(imageObs)/2.0, -image.getHeight(imageObs)/2.0);
		localAT.preConcatenate(at);
		((Graphics2D)g).drawImage(image, localAT, imageObs); 
	}
	
	public void init(Ball host) {
	  imageObs = (ImageObserver)host.getCanvas();
	  MediaTracker mt = new MediaTracker(host.getCanvas());
	  mt.addImage(image, 1);
	  try {
	  	mt.waitForAll();
	  }
	  catch(Exception e){
	  	System.out.println("ImagePaintStrategy.init(): Error waiting for image.  Exception = "+e);
	  }

	  scaleFactor = 2.0/(fillFactor*(image.getWidth(imageObs)+image.getHeight(imageObs))/2.0);
	}
	
}
